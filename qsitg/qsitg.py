# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Qsitg
                                 A QGIS plugin
 TODO
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-07
        git sha              : $Format:%H$
        copyright            : (C) 2025 by SITG
        email                : sitg@etat.ge.ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import json

from qgis.gui import QgisInterface
from qgis.core import (
    Qgis,
    QgsApplication,
    QgsAuthMethodConfig,
    QgsMessageLog,
    QgsSettings,
)
from qgis.PyQt.QtCore import Qt, QItemSelectionModel
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import (
    QAction,
    QDockWidget,
    QTreeView,
)

from . import resources  # noqa
from .config import ARCGISFEATURESERVERS, AUTH_SETTING_ID, VECTORTILES
from .qsitg_dialog import QsitgDialog


class Qsitg:
    """QGIS Plugin Implementation."""

    def __init__(self, iface: QgisInterface):
        # Save reference to the QGIS interface
        self.iface = iface
        self.dialog = None

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon = QIcon(":/plugins/qsitg/icon.png")

        plugin_menu = self.iface.pluginMenu()
        if plugin_menu is None:
            raise RuntimeError("couldn't load plugin menu")
        self.menu = plugin_menu.addMenu(icon, "SITG")

        self.action_about = QAction(icon, "À propos...")
        self.action_about.triggered.connect(self.run_about)
        self.menu.addAction(self.action_about)

        self.action_services = QAction("Reconfigurer les géoservices")
        self.action_services.triggered.connect(self.run_reset_geoservices)
        self.menu.addAction(self.action_services)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        self.iface.pluginMenu().removeAction(self.menu.menuAction())

    def log(self, message, level=Qgis.Info):
        QgsMessageLog.logMessage(message, "qsitg", level)

    def message(self, title, message, level=Qgis.Info):
        messagebar = self.iface.messageBar()
        if messagebar is None:
            raise RuntimeError("couldn't load messagebar")
        messagebar.pushMessage(title, message, level)

    def run_about(self):
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.dialog is None:
            self.dialog = QsitgDialog()

        # Run the dialog
        self.dialog.show()
        result = self.dialog.exec_()
        if result:
            pass

    def run_reset_geoservices(self):
        browser_items_names = []

        # Collapse all items in the browser (OAuth2 login is triggered if items are open when refreshing the browser)
        browser = self.iface.mainWindow().findChild(QDockWidget, "Browser")
        treeview = browser.findChild(QTreeView)
        treeview.clearSelection()
        treeview.collapseAll()

        # Create or update the OAuth2 configuration
        auth_manager = QgsApplication.authManager()
        if auth_manager is None:
            raise RuntimeError("couldn't load auth manager")
        auth_config = QgsAuthMethodConfig()
        auth_config.setId(AUTH_SETTING_ID)
        auth_config.setName("Authentification Portal SITG")
        auth_config.setMethod("OAuth2")
        auth_config.setConfig(
            "oauth2config",
            json.dumps(
                {
                    "clientId": "ioxyFVH8KND5M2Iu",
                    "grantFlow": 3,
                    "redirectHost": "127.0.0.1",
                    "redirectPort": "7070",
                    "requestUrl": "https://app2.ge.ch/tergeoportal/sharing/rest/oauth2/authorize",
                    "tokenUrl": "https://app2.ge.ch/tergeoportal/sharing/rest/oauth2/token",
                }
            ),
        )
        auth_manager.storeAuthenticationConfig(auth_config, overwrite=True)
        self.log(
            f"Successfully (re)created auth config {AUTH_SETTING_ID}", Qgis.Success
        )

        # Create or update the Arcgis REST entries in the browser
        settings = QgsSettings()
        settings.beginGroup("connections/arcgisfeatureserver/items")
        for name, config in ARCGISFEATURESERVERS.items():
            browser_items_names.append(name)
            settings.beginGroup(name)
            for key, val in config.items():
                settings.setValue(key, val)
            settings.endGroup()
        self.log(
            f"Successfully (re)created {len(ARCGISFEATURESERVERS)} Arcgis REST entries",
            Qgis.Success,
        )

        # Create or update the vector tiles backgrounds
        settings = QgsSettings()
        settings.beginGroup("connections/vector-tile/items")
        for name, config in VECTORTILES.items():
            group_name = f"SITG - {name}"
            browser_items_names.append(group_name)
            settings.beginGroup(group_name)
            for key, val in config.items():
                settings.setValue(key, val)
            settings.endGroup()
        self.log(
            f"Successfully (re)created {len(VECTORTILES)} Vector tiles entries",
            Qgis.Success,
        )

        # Reload the browser GUI
        self.iface.reloadConnections()

        # Select freshly created items and show the browser
        model = treeview.model()
        for browser_item_name in browser_items_names:
            tree_items = model.match(
                model.index(0, 0),
                Qt.DisplayRole,
                browser_item_name,
                flags=Qt.MatchRecursive | Qt.MatchExactly | Qt.MatchCaseSensitive,
            )
            for tree_item in tree_items:
                treeview.scrollTo(tree_item)
                treeview.selectionModel().select(tree_item, QItemSelectionModel.Select)
        browser.setVisible(True)
        browser.raise_()

        self.message(
            "Succès !",
            "Les geoservices du SITG ont été (re)configurés avec succès et sont prêts à être utilisés.",
            Qgis.Success,
        )
